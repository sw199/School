#!/bin/bash

#-------------------------------------------------------------------------------------------------#
# Scott Wedge                                                                                     #
#                                                                                                 #
#       This bash script will use various prompts on the terminal in order to guide the           #
#           user through the file system to inspect log files. This script and its few             #
#           options will work on all text-based files anywhere on the filesystem.                 #
#           This script is made with separate functions in order to eaily scale                   #
#           up, and include any file opporation as needed.                                        #
#                                                                                                 #
#-------------------------------------------------------------------------------------------------#


# Define variables
Listing=$( ls /var/log )
#xargs is unable to process new lines, so this benefits me for output of 'ls -l'
xargs=/usr/bin/xargs
#date=/bin/date


# function show_menu()
#
# displays script main menu
#
function show_menu(){
  echo "   ***********************************************************************"
  echo "   *                               Main Menu                             *"
  echo "   ***********************************************************************"
  echo "   |                                                                     |"
  echo "   | 1. list the contents of /var/log                                    |"
  echo "   | 2. Take action on file                                              |"
  echo "   | 3. Exit                                                             |"
  echo "   |_____________________________________________________________________|"
}


# function print_header()
#
# this function prints a header so output looks nice
#
function print_header(){
  echo ""
  local h="$@"
  echo "   ***********************************************************************"
  echo "   *   ${h}"
  echo "   ***********************************************************************"
}


# function list_logs() 
#
# displays available log files to be analyzed
#
function list_logs(){
  print_header " /var/log directory contents: "
  echo "$Listing"
  echo ""
}


# function attack_the_logs()
#
# prompts user for desired filename to inspect. The user will be able to take
#  several actions on a file from within this function.
#
function attack_the_logs(){
  
  echo "" 
  read -p "   Enter the log file name (INCLUDE full path): " FILE
  
  # if file name does not exist, recurrsion
  if [ ! -e "$FILE" ]
  then
    echo "   Does not exist: $FILE"
    attack_the_logs
  fi
  
  while : # loops menu until case (5) is selected
  do
    print_header " Select from the below menu: "
    echo ""
    # outputs all lines in file where specified word is found by grep
    echo "   1. Search for keyword"
    # outputs the number amount of the specified words occurances in the file
    echo "   2. Count occurences of keyword"
    # outputs all lines within file that fall between two specified dates
    echo "   3. Display all contents within date range"
    # outputs the type of file that the file is
    echo "   4. Display the file information"
    # outputs the location/path to a file name provided by the user
    echo "   5. Find location of specified file"
    # return to main menu
    echo "   6. Return to Main Menu to exit or select a new file"

  echo ""
  read userchoice
  case $userchoice in 
    1 )
        echo ""
        read -p "   Enter the desired word: " WORD
        echo ""
        grep "$WORD" $FILE  #WORD is not highlightes on output... not sure why
        echo ""
        ;;
    2 )
        echo ""
        read -p "   Enter the word to be counted: " COUNT
        echo ""
        # -o: each instance on new line, -i: ignore case
        grep -o -i "$COUNT" $FILE | wc -l
        echo ""
        ;;
    3 ) 
       echo ""
       if [ $FILE == '/var/log/auth.log' ] || [ $FILE == '/var/log/kern.log' ] || [ $FILE == '/var/log/syslog' ]
       then
           read -p "   Enter start date (EX: Jan 31 23 || Jan  1 03): " START
           read -p "   Enter end date (EX: Feb 13 19 || Feb  3 08): " FINISH
           echo ""
           
           # gets line number of users word (needs to be parsed though)
           startDate=$(grep -o -a -n -m 1 -h -r "$START" $FILE | head -1)
           endDate=$(grep -o -a -n -m 1 -h -r "$FINISH" $FILE | head -1)
          
           # retain str portion before the colon (parsed)
           sDate=${startDate%:*}
           eDate=${endDate%:*}
           
           #awk command outputs all lines between values in sDate and eDate (line numbers)
           awk -v s="$sDate" -v e="$eDate" 'NR>s&&NR<e' $FILE
       
       elif [ $FILE == '/var/log/httpd/access_log' ] || [ $FILE == '/var/log/httpd/error_log' ]
       then
           read -p "   Enter start date (EX: 14/Oct/2020:17): " STARTO
           read -p "   Enter end date (EX: 17/Oct/2020:17): " FINISHO
           echo ""
           
           # gets line number of users word 
           startDateo=$(grep -o -a -n -m 1 -h -r "$STARTO" | head -1)
           endDateo=$(grep -o -a -n -m 1 -h -r "$FINISHO" | head -1)

           # retain str portion 2 after colon
           sDateo=${startDateo%:2*}
           eDateo=${endDateo%:2*}

           #output between two line numbers
           awk -v s1="$sDateo" -v e1="$eDateo" 'NR>s1&&NR<e1' $FILE

       elif [ $FILE == '/var/log/dpkg.log.1' ]
       then
           read -p "   Enter start date (EX: 2021-01-03 03:53:06): " STARTOO
           read -p "   Enter end date (EX: 2021-01-03 03:53:06): " FINISHOO
           echo ""
           
           # gets line number of users word 
           startDateoo=$(grep -o -a -n -m 1 -h -r "$STARTOO" | head -1)
           endDateoo=$(grep -o -a -n -m 1 -h -r "$FINISHOO" | head -1)

           # retain str portion 2 after colon
           sDateoo=${startDateoo%:2*}
           eDateoo=${endDateoo%:2*}

           #output between two line numbers
           awk -v s2="$sDateoo" -v e2="$eDateoo" 'NR>s2&&NR<e2' $FILE         

       else
           echo "   The date-range cannot be parsed on your specified file at this time"
       fi
       echo ""
       ;;
    4 )
        echo ""
        echo "File listing: "
        ls -l $FILE | $xargs
        echo ""
        echo "File type: "
        file $FILE
        echo ""
        echo "File size: "
        du -ha $FILE
        echo ""
        echo "md5sum: "
        md5sum $FILE
        echo ""
        echo "sha256sum: "
        sha256sum $FILE
        echo ""
        ;;
    5 )
        read -p "   Enter the name of file to find: " USERFILE
        echo ""
        find / -iname USERFILE 2> /dev/null
        echo ""
        ;;
    6 )
        echo ""
        echo "   EOF: $FILE"
        date
        echo "   -------------------------------EOF-------------------------------"
        echo ""
        echo ""
        break
        ;;
    * )
        echo "   Select between 1 and 5 only."
        ;;

  esac
  done
}


# function get_input()
#
# controls flow of Main Menu from user input
#
function get_input() {
  echo ""
  local x
  read -p "   Enter your choice [ 1 - 3 ] " x
  case $x in
  1) list_logs ;;
  2) attack_the_logs ;;
  3) echo "   End."; exit 0 ;;
  *) 
  echo "   Select between 1 to 3 only."
  esac
}


# loops main menu until user exits
#
# if this is not at the bottom of the script, the user will experience
#  an endless loop that accomplishes nothing aside from taking up
#  system resources
#
while true
do
  show_menu # prints the main menu
  get_input # wait for user input
done
